[["Map",1,2,9,10],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.13.0","content-config-digest","4e715b3916c01e4c","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[],\"responsiveStyles\":false},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":{\"type\":\"shiki\",\"excludeLangs\":[\"math\"]},\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false,\"liveContentCollections\":false,\"csp\":false,\"staticImportMetaEnv\":false,\"chromeDevtoolsWorkspace\":false},\"legacy\":{\"collections\":false}}","docs",["Map",11,12,18,19,83,84],"games/amelcraft/readme",{"id":11,"data":13,"body":14,"filePath":15,"digest":16,"deferredRender":17},{},"import Code from \"@components/Code.astro\";\n\n# 📝 Amelcraft: A Kid-Friendly 2D Minecraft-Inspired Game\n\n## 🔄 Project Evolution\nThe project began as a birthday idea for a 7-year-old, inspired by the Minecraft hype but aiming for simplicity and accessibility. The concept evolved from a general 2D block-building game to a focused, responsive, cross-device experience using Phaser.js. Early discussions weighed complexity (e.g., day/night cycles, pathfinding) against the need for a fun, easy-to-play game. The design journey included debates about control schemes, building mechanics, and the choice between 2D and simulated 3D, ultimately favoring a top-down, grid-based approach for ease of use and development.\n\n## 🚀 Project Genesis & Motivation\nThe motivation was personal: to create a custom game for a child’s birthday, capturing the excitement of Minecraft in a form approachable for a young beginner. The project was inspired by the child’s fascination with Minecraft and the desire to provide a creative, interactive experience tailored to her age and skills. The goal was to foster creativity, exploration, and fun, while keeping technical and gameplay complexity low.\n\n## 🚀 Project Overview\nAmelcraft is a simple, 2D, tile-based game where players can harvest materials and place blocks in a world reminiscent of Minecraft. Designed for both desktop and mobile, it features responsive controls and adaptive camera zoom, ensuring a smooth experience across devices. The game is intended for young children, with intuitive drag-to-move controls and straightforward block placement.\n\n## 💡 Core Ideas & Features\n- **2D Tile-Based World:** The game world is a grid of 48x48px tiles.\n- **Harvesting & Placing Blocks:** Players collect materials and place blocks on the grid.\n- **Drag-to-Move Controls:** Movement is controlled by dragging on the screen (touch or mouse).\n- **Responsive Design:** The game adapts to device size and orientation, with dynamic camera zoom.\n- **Simple Inventory:** Materials collected are stored and can be selected for placement.\n- **Single-File POC:** Initial proof-of-concept provided as a single HTML file for easy testing.\n\n## 🧩 Design Decisions & Rationale\n- **Phaser.js Chosen:** For rapid development and cross-platform support.\n- **Drag-to-Move Over Click-to-Move:** Simpler for young children, avoids pathfinding complexity.\n- **Top-Down (Horizontal) Building:** More intuitive for kids, easier to implement than vertical or 3D.\n- **Responsive Canvas & Camera Zoom:** Ensures playability on all devices, keeps sprites visible and detailed.\n- **No Day/Night Cycle:** Dropped for simplicity.\n- **Block Placement Logic:** Grid-based, with pointer-to-tile conversion for intuitive interaction.\n\n## ❌ Rejected Ideas & Alternatives\n- **Day/Night Cycle:** Rejected to keep the game simple.\n- **Click-to-Move with Pathfinding:** Considered but dropped due to complexity.\n- **3D or Isometric Building:** Rejected for technical and cognitive simplicity; 2D chosen.\n- **Vertical (Wall) Building:** Considered, but horizontal (ground) building selected for accessibility.\n\n## ⚖️ Player vs. Team Focus Debate\nThe game is designed as a single-player experience, focused on individual creativity and exploration. Team or multiplayer features were not prioritized, given the target audience and scope.\n\n## 🌏 Personal/Inspirational Details\nThe project was inspired by a child’s birthday and her fascination with Minecraft. The design choices reflect a desire to create a fun, approachable experience tailored to her interests and abilities.\n\n## 💬 Key Conversation Excerpts\n> “For my daughter's 7th birthday I want to make her a little video game, using phaser.js...simple 2D, sprite and tilemap based game, in which she can harvest a few materials and then place blocks from these materials in the world.”\n\n> “I want the game to run on a desktop, as well as a mobile phone...controllable by touch/mouse click and the game screen and camera zoom level should adapt itself to the device.”\n\n> “For simplicity and a smooth experience for a 7-year-old, Option 2 (drag-to-move) is best. It’s easy to implement in Phaser, and kids enjoy direct control.”\n\n> “For a Minecraft-like experience and simplicity for a child, the horizontal plane (top-down) is best. It’s intuitive, easy to control, and lets your daughter ‘walk’ over her creations.”\n\n## 🏗️ Architecture & Structure\n- **Phaser.js Engine:** Handles rendering, input, and game logic.\n- **Responsive Canvas:** Uses Phaser’s scale manager for device adaptation.\n- **Camera Zoom Logic:** Dynamically calculates zoom based on screen size and tile size.\n- **Player Sprite:** Controlled via drag-to-move pointer events.\n- **Tile Grid:** 2D array represents the world; block placement updates the grid and renders sprites.\n- **Inventory System:** Simple array for collected materials and block selection.\n\n## 💻 Code Snippets & Examples\n\n### Responsive Game Screen\n\n\u003CCode\n  src={{ \"vanilla\" : {\n    'index.html': new URL(\"file:///ideas/games/amelcraft/responsive-game-screen/index.html\"),\n    'index.js': new URL(\"file:///ideas/games/amelcraft/responsive-game-screen/index.js\")\n  }}}\n/>\n\n### Drag to Move\n\n\u003CCode\n  src={{ \"vanilla\" : {\n    'index.html': new URL(\"file:///ideas/games/amelcraft/drag-to-move/index.html\"),\n    'index.js': new URL(\"file:///ideas/games/amelcraft/drag-to-move/index.js\")\n  }}}\n/>\n\n### Block Placement\n\n\u003CCode\n  src={{ \"vanilla\" : {\n    'index.html': new URL(\"file:///ideas/games/amelcraft/block-placement/index.html\"),\n    'index.js': new URL(\"file:///ideas/games/amelcraft/block-placement/index.js\")\n  }}}\n/>\n\n## 📚 References & Inspirations\n- [Phaser.js Documentation](https://phaser.io/)\n- Minecraft (as inspiration for block-building mechanics)\n- Stardew Valley, Zelda (for top-down design ideas)\n\n## ❓ Open Questions & Next Steps\n- Expand inventory and block types.\n- Add harvesting mechanics and sound effects.\n- Design custom sprites and tiles.\n- Consider simple NPCs or animals for added fun.\n- Polish UI for block selection and inventory management.","../../ideas/games/amelcraft/README.mdx","579be95edee74625",true,"games/basketball/readme",{"id":18,"data":20,"body":21,"filePath":22,"digest":23,"rendered":24},{},"# 📝 Basketball Game\n\n## Current Thoughts\n\n### Turn-based Matches\n- Matches are turn based games, where every player has to perform an action every turn. Turns could be:\n  - Moving (with or without the ball)\n  - Passing\n  - Stealing\n  - Blocking\n  - Rebounding\n  - Shooting\n  - ...\n- Depending on attributes and skills, the player has a higher chance to succeed\n- A high IQ could give players a better intuition of what to do next\n  - See passing lanes\n  - Estimate other players will react\n- A high IQ might also allow to slow down the time for the decision which action to take\n\n## 🚀 Project Genesis & Motivation\nThe project began as an exploration of combining the MyPlayer mode from NBA2K with the collectible and exploration elements of games like Pokémon. The initial motivation was to create a basketball game that goes beyond traditional sports simulations, focusing on player progression, team building, and world discovery. Early brainstorming led to the decision to avoid creature collection and survival mechanics, instead emphasizing skills, traits, and team assembly. Inspirations include NBA2K, FIFA Manager, and the anime Captain Tsubasa, which influenced the idea of regional backgrounds shaping player abilities.\n\n## 🚀 Project Overview\nThis is a basketball RPG/simulation game concept that blends MyPlayer-style character progression with team management, world exploration, and a modular, community-driven league system. The goal is to create a game where players build and evolve their own basketball careers and teams, explore diverse regions, and interact with a customizable ecosystem. The intended audience includes basketball fans, sports sim enthusiasts, and modders.\n\n## 💡 Core Ideas & Features\n- **Player Creation & Progression:** Create and customize a basketball player, develop skills and traits, and progress through training, matches, and exploration.\n- **Team Management:** Recruit, train, and manage teammates, each with unique skills, traits, and backgrounds.\n- **World Exploration:** Travel to different cities and regions, each offering unique challenges, local talent, and cultural quests.\n- **Configurable League System:** Leagues, teams, and players are defined in structured files (e.g., JSON), enabling community-generated content and import of real-world stats.\n- **Simulation-Driven Matches:** Matches are visualized with icons/avatars, run automatically, and allow user intervention for special skills and strategic decisions.\n- **Skill Trees & Specializations:** Skills are unlocked via prerequisites, allowing for RPG-like specialization and unique player builds. Skill acquisition may involve training sessions, exploration, or meeting stat thresholds.\n- **Stamina & Substitution:** Every action costs stamina, affecting performance and requiring strategic substitutions and pacing.\n- **AI Scripting (DSL):** Advanced users can define player/team behavior and strategy using a custom scripting language.\n- **Scouting & Discovery:** Player traits and skills are revealed progressively through scouting and gameplay, encouraging exploration and investment.\n\n## 🧩 Design Decisions & Rationale\n- **Hybrid Focus:** Chosen to blend individual player progression with team management and world exploration for a dynamic experience. Alternatives like pure team management or pure player focus were considered but rejected for lack of depth.\n- **Minimalist Visuals:** Decided to use icons and avatars for match simulation to reduce asset complexity and development overhead. Full player animations were rejected due to technical and resource constraints.\n- **Community Modding:** Enabled users to create and share custom leagues and teams via JSON schemas and import modules, inspired by the desire for a flexible, community-driven ecosystem.\n- **State Management:** Zustand was selected as the single source of truth for game state, accessible by both React UI and Phaser.js simulation, for simplicity and scalability.\n- **Documentation:** Modular Markdown documentation was adopted to ensure clarity and maintainability.\n\n## ❌ Rejected Ideas & Alternatives\n- **Creature Collection & Survival Mechanics:** Dropped early in the concept phase to keep the focus on basketball skills, traits, and team building.\n- **Full Player Animations:** Rejected due to asset creation workload and technical feasibility; minimalist visuals chosen instead.\n- **Pure Team Management or Player Focus:** Considered but found limiting; hybrid approach selected for richer gameplay.\n\n## 💬 Key Conversation Excerpts\n> \"So, I don't really want to add creatures and survival to this game, to be honest... I'm thinking of heavily focusing on special skills or traits to help while playing basketball.\"\n\n> \"It reminds me a lot of an anime that I used to watch as a kid, which was called Captain Tsubasa... that aspect of connecting the world and its specific characteristics... influences the kind of players there might be, and the kind of training you might be able to do there.\"\n\n> \"The league should be configurable... I could therefore enable people to do that on their own if they want to and maybe create a community around that.\"\n\n## 🏗️ Architecture & Structure\n- **Frontend:** Built with React for UI components and dashboards.\n- **Game Simulation:** Phaser.js (optional) for match logic and visualizations.\n- **State Management:** Zustand for global state, shared between UI and simulation.\n- **Data Storage:** JSON files for leagues, teams, and player data; local storage or IndexedDB for user progress.\n- **Community Features:** Tools for importing/exporting league data and sharing with others.\n\n### Example Architecture Diagram\n```\n[React UI] \u003C-> [Zustand Store] \u003C-> [Phaser.js Simulation]\n           ^                ^\n           |                |\n    [JSON League Data]   [Local Storage]\n```\n\n## 💻 Code Snippets & Examples\n\n### Zustand Store Example\n```typescript\nimport create from 'zustand';\n\nexport const useGameStore = create((set, get) => ({\n  stamina: 100,\n  cooldown: 0,\n  isSkillReady: true,\n  reduceStamina: (amount) => set({ stamina: Math.max(0, get().stamina - amount) }),\n  triggerSkill: () => {\n    if (get().isSkillReady && get().stamina >= 20) {\n      set({ cooldown: 5, isSkillReady: false });\n      get().reduceStamina(20);\n    }\n  },\n  tickCooldown: () => {\n    const { cooldown } = get();\n    if (cooldown > 1) set({ cooldown: cooldown - 1 });\n    else set({ cooldown: 0, isSkillReady: true });\n  },\n  resetCooldown: () => set({ cooldown: 0, isSkillReady: true }),\n}));\n```\n\n### League JSON Schema Example\n```json\n{\n  \"team_name\": \"Example Team\",\n  \"logo\": \"logo.png\",\n  \"arena\": \"Example Arena\",\n  \"players\": [\n    { \"name\": \"Player 1\", \"skills\": [\"3PT Shooter\", \"Defender\"] },\n    { \"name\": \"Player 2\", \"skills\": [\"Passer\"] }\n  ]\n}\n```\n\n## 📚 References & Inspirations\n- NBA2K MyPlayer mode\n- FIFA Manager series\n- Captain Tsubasa anime\n- Zustand (state management)\n- Phaser.js (game engine)\n- JSON Schema for modding\n\n## ❓ Open Questions & Next Steps\n- How should the skill tree and progression system be visualized and managed?\n- What features should the custom scripting language (DSL) support for AI behavior?\n- How will community content (leagues, teams) be shared and moderated?\n- What are the best practices for balancing player progression and team management?\n- Next: Prototype skill tree UI, design JSON schema for leagues, build initial React components, and document further architectural decisions.","../../ideas/games/basketball/README.md","51fe3ad242af93c5",{"html":25,"metadata":26},"\u003Ch1 id=\"-basketball-game\">📝 Basketball Game\u003C/h1>\n\u003Ch2 id=\"current-thoughts\">Current Thoughts\u003C/h2>\n\u003Ch3 id=\"turn-based-matches\">Turn-based Matches\u003C/h3>\n\u003Cul>\n\u003Cli>Matches are turn based games, where every player has to perform an action every turn. Turns could be:\n\u003Cul>\n\u003Cli>Moving (with or without the ball)\u003C/li>\n\u003Cli>Passing\u003C/li>\n\u003Cli>Stealing\u003C/li>\n\u003Cli>Blocking\u003C/li>\n\u003Cli>Rebounding\u003C/li>\n\u003Cli>Shooting\u003C/li>\n\u003Cli>…\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>Depending on attributes and skills, the player has a higher chance to succeed\u003C/li>\n\u003Cli>A high IQ could give players a better intuition of what to do next\n\u003Cul>\n\u003Cli>See passing lanes\u003C/li>\n\u003Cli>Estimate other players will react\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>A high IQ might also allow to slow down the time for the decision which action to take\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"-project-genesis--motivation\">🚀 Project Genesis &#x26; Motivation\u003C/h2>\n\u003Cp>The project began as an exploration of combining the MyPlayer mode from NBA2K with the collectible and exploration elements of games like Pokémon. The initial motivation was to create a basketball game that goes beyond traditional sports simulations, focusing on player progression, team building, and world discovery. Early brainstorming led to the decision to avoid creature collection and survival mechanics, instead emphasizing skills, traits, and team assembly. Inspirations include NBA2K, FIFA Manager, and the anime Captain Tsubasa, which influenced the idea of regional backgrounds shaping player abilities.\u003C/p>\n\u003Ch2 id=\"-project-overview\">🚀 Project Overview\u003C/h2>\n\u003Cp>This is a basketball RPG/simulation game concept that blends MyPlayer-style character progression with team management, world exploration, and a modular, community-driven league system. The goal is to create a game where players build and evolve their own basketball careers and teams, explore diverse regions, and interact with a customizable ecosystem. The intended audience includes basketball fans, sports sim enthusiasts, and modders.\u003C/p>\n\u003Ch2 id=\"-core-ideas--features\">💡 Core Ideas &#x26; Features\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Cstrong>Player Creation &#x26; Progression:\u003C/strong> Create and customize a basketball player, develop skills and traits, and progress through training, matches, and exploration.\u003C/li>\n\u003Cli>\u003Cstrong>Team Management:\u003C/strong> Recruit, train, and manage teammates, each with unique skills, traits, and backgrounds.\u003C/li>\n\u003Cli>\u003Cstrong>World Exploration:\u003C/strong> Travel to different cities and regions, each offering unique challenges, local talent, and cultural quests.\u003C/li>\n\u003Cli>\u003Cstrong>Configurable League System:\u003C/strong> Leagues, teams, and players are defined in structured files (e.g., JSON), enabling community-generated content and import of real-world stats.\u003C/li>\n\u003Cli>\u003Cstrong>Simulation-Driven Matches:\u003C/strong> Matches are visualized with icons/avatars, run automatically, and allow user intervention for special skills and strategic decisions.\u003C/li>\n\u003Cli>\u003Cstrong>Skill Trees &#x26; Specializations:\u003C/strong> Skills are unlocked via prerequisites, allowing for RPG-like specialization and unique player builds. Skill acquisition may involve training sessions, exploration, or meeting stat thresholds.\u003C/li>\n\u003Cli>\u003Cstrong>Stamina &#x26; Substitution:\u003C/strong> Every action costs stamina, affecting performance and requiring strategic substitutions and pacing.\u003C/li>\n\u003Cli>\u003Cstrong>AI Scripting (DSL):\u003C/strong> Advanced users can define player/team behavior and strategy using a custom scripting language.\u003C/li>\n\u003Cli>\u003Cstrong>Scouting &#x26; Discovery:\u003C/strong> Player traits and skills are revealed progressively through scouting and gameplay, encouraging exploration and investment.\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"-design-decisions--rationale\">🧩 Design Decisions &#x26; Rationale\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Cstrong>Hybrid Focus:\u003C/strong> Chosen to blend individual player progression with team management and world exploration for a dynamic experience. Alternatives like pure team management or pure player focus were considered but rejected for lack of depth.\u003C/li>\n\u003Cli>\u003Cstrong>Minimalist Visuals:\u003C/strong> Decided to use icons and avatars for match simulation to reduce asset complexity and development overhead. Full player animations were rejected due to technical and resource constraints.\u003C/li>\n\u003Cli>\u003Cstrong>Community Modding:\u003C/strong> Enabled users to create and share custom leagues and teams via JSON schemas and import modules, inspired by the desire for a flexible, community-driven ecosystem.\u003C/li>\n\u003Cli>\u003Cstrong>State Management:\u003C/strong> Zustand was selected as the single source of truth for game state, accessible by both React UI and Phaser.js simulation, for simplicity and scalability.\u003C/li>\n\u003Cli>\u003Cstrong>Documentation:\u003C/strong> Modular Markdown documentation was adopted to ensure clarity and maintainability.\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"-rejected-ideas--alternatives\">❌ Rejected Ideas &#x26; Alternatives\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Cstrong>Creature Collection &#x26; Survival Mechanics:\u003C/strong> Dropped early in the concept phase to keep the focus on basketball skills, traits, and team building.\u003C/li>\n\u003Cli>\u003Cstrong>Full Player Animations:\u003C/strong> Rejected due to asset creation workload and technical feasibility; minimalist visuals chosen instead.\u003C/li>\n\u003Cli>\u003Cstrong>Pure Team Management or Player Focus:\u003C/strong> Considered but found limiting; hybrid approach selected for richer gameplay.\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"-key-conversation-excerpts\">💬 Key Conversation Excerpts\u003C/h2>\n\u003Cblockquote>\n\u003Cp>“So, I don’t really want to add creatures and survival to this game, to be honest… I’m thinking of heavily focusing on special skills or traits to help while playing basketball.”\u003C/p>\n\u003C/blockquote>\n\u003Cblockquote>\n\u003Cp>“It reminds me a lot of an anime that I used to watch as a kid, which was called Captain Tsubasa… that aspect of connecting the world and its specific characteristics… influences the kind of players there might be, and the kind of training you might be able to do there.”\u003C/p>\n\u003C/blockquote>\n\u003Cblockquote>\n\u003Cp>“The league should be configurable… I could therefore enable people to do that on their own if they want to and maybe create a community around that.”\u003C/p>\n\u003C/blockquote>\n\u003Ch2 id=\"️-architecture--structure\">🏗️ Architecture &#x26; Structure\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Cstrong>Frontend:\u003C/strong> Built with React for UI components and dashboards.\u003C/li>\n\u003Cli>\u003Cstrong>Game Simulation:\u003C/strong> Phaser.js (optional) for match logic and visualizations.\u003C/li>\n\u003Cli>\u003Cstrong>State Management:\u003C/strong> Zustand for global state, shared between UI and simulation.\u003C/li>\n\u003Cli>\u003Cstrong>Data Storage:\u003C/strong> JSON files for leagues, teams, and player data; local storage or IndexedDB for user progress.\u003C/li>\n\u003Cli>\u003Cstrong>Community Features:\u003C/strong> Tools for importing/exporting league data and sharing with others.\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"example-architecture-diagram\">Example Architecture Diagram\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>[React UI] &#x3C;-> [Zustand Store] &#x3C;-> [Phaser.js Simulation]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>           ^                ^\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>           |                |\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    [JSON League Data]   [Local Storage]\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"-code-snippets--examples\">💻 Code Snippets &#x26; Examples\u003C/h2>\n\u003Ch3 id=\"zustand-store-example\">Zustand Store Example\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"typescript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> create \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'zustand'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> useGameStore\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> create\u003C/span>\u003Cspan style=\"color:#E1E4E8\">((\u003C/span>\u003Cspan style=\"color:#FFAB70\">set\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">get\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> ({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  stamina: \u003C/span>\u003Cspan style=\"color:#79B8FF\">100\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  cooldown: \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  isSkillReady: \u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  reduceStamina\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: (\u003C/span>\u003Cspan style=\"color:#FFAB70\">amount\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#B392F0\"> set\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({ stamina: Math.\u003C/span>\u003Cspan style=\"color:#B392F0\">max\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#B392F0\">get\u003C/span>\u003Cspan style=\"color:#E1E4E8\">().stamina \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> amount) }),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  triggerSkill\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: () \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#B392F0\">get\u003C/span>\u003Cspan style=\"color:#E1E4E8\">().isSkillReady \u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#B392F0\"> get\u003C/span>\u003Cspan style=\"color:#E1E4E8\">().stamina \u003C/span>\u003Cspan style=\"color:#F97583\">>=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 20\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">      set\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({ cooldown: \u003C/span>\u003Cspan style=\"color:#79B8FF\">5\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, isSkillReady: \u003C/span>\u003Cspan style=\"color:#79B8FF\">false\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">      get\u003C/span>\u003Cspan style=\"color:#E1E4E8\">().\u003C/span>\u003Cspan style=\"color:#B392F0\">reduceStamina\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">20\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  tickCooldown\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: () \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { \u003C/span>\u003Cspan style=\"color:#79B8FF\">cooldown\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> } \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> get\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (cooldown \u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#B392F0\">set\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({ cooldown: cooldown \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    else\u003C/span>\u003Cspan style=\"color:#B392F0\"> set\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({ cooldown: \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, isSkillReady: \u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  resetCooldown\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: () \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#B392F0\"> set\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({ cooldown: \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, isSkillReady: \u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}));\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"league-json-schema-example\">League JSON Schema Example\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"json\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"team_name\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Example Team\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"logo\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"logo.png\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"arena\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Example Arena\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"players\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: [\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    { \u003C/span>\u003Cspan style=\"color:#79B8FF\">\"name\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Player 1\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">\"skills\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: [\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"3PT Shooter\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Defender\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    { \u003C/span>\u003Cspan style=\"color:#79B8FF\">\"name\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Player 2\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">\"skills\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: [\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Passer\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  ]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"-references--inspirations\">📚 References &#x26; Inspirations\u003C/h2>\n\u003Cul>\n\u003Cli>NBA2K MyPlayer mode\u003C/li>\n\u003Cli>FIFA Manager series\u003C/li>\n\u003Cli>Captain Tsubasa anime\u003C/li>\n\u003Cli>Zustand (state management)\u003C/li>\n\u003Cli>Phaser.js (game engine)\u003C/li>\n\u003Cli>JSON Schema for modding\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"-open-questions--next-steps\">❓ Open Questions &#x26; Next Steps\u003C/h2>\n\u003Cul>\n\u003Cli>How should the skill tree and progression system be visualized and managed?\u003C/li>\n\u003Cli>What features should the custom scripting language (DSL) support for AI behavior?\u003C/li>\n\u003Cli>How will community content (leagues, teams) be shared and moderated?\u003C/li>\n\u003Cli>What are the best practices for balancing player progression and team management?\u003C/li>\n\u003Cli>Next: Prototype skill tree UI, design JSON schema for leagues, build initial React components, and document further architectural decisions.\u003C/li>\n\u003C/ul>",{"headings":27,"localImagePaths":79,"remoteImagePaths":80,"frontmatter":81,"imagePaths":82},[28,32,36,40,43,46,49,52,55,58,61,64,67,70,73,76],{"depth":29,"slug":30,"text":31},1,"-basketball-game","📝 Basketball Game",{"depth":33,"slug":34,"text":35},2,"current-thoughts","Current Thoughts",{"depth":37,"slug":38,"text":39},3,"turn-based-matches","Turn-based Matches",{"depth":33,"slug":41,"text":42},"-project-genesis--motivation","🚀 Project Genesis & Motivation",{"depth":33,"slug":44,"text":45},"-project-overview","🚀 Project Overview",{"depth":33,"slug":47,"text":48},"-core-ideas--features","💡 Core Ideas & Features",{"depth":33,"slug":50,"text":51},"-design-decisions--rationale","🧩 Design Decisions & Rationale",{"depth":33,"slug":53,"text":54},"-rejected-ideas--alternatives","❌ Rejected Ideas & Alternatives",{"depth":33,"slug":56,"text":57},"-key-conversation-excerpts","💬 Key Conversation Excerpts",{"depth":33,"slug":59,"text":60},"️-architecture--structure","🏗️ Architecture & Structure",{"depth":37,"slug":62,"text":63},"example-architecture-diagram","Example Architecture Diagram",{"depth":33,"slug":65,"text":66},"-code-snippets--examples","💻 Code Snippets & Examples",{"depth":37,"slug":68,"text":69},"zustand-store-example","Zustand Store Example",{"depth":37,"slug":71,"text":72},"league-json-schema-example","League JSON Schema Example",{"depth":33,"slug":74,"text":75},"-references--inspirations","📚 References & Inspirations",{"depth":33,"slug":77,"text":78},"-open-questions--next-steps","❓ Open Questions & Next Steps",[],[],{},[],"interactive-docs/readme",{"id":83,"data":85,"body":86,"filePath":87,"digest":88,"rendered":89},{},"# 📝 Interactive Documentation System & Enhanced Copy-in CLI Solution\n\n**Continued as [mdxpress](https://github.com/fea-lib/mdxpress)**\n\n## 🔄 Project Evolution\nThe project began with a clear vision for interactive documentation that would serve software projects and educational purposes. The initial inquiry focused on finding solutions that could balance text-based version control with enhanced interactive features. Early discussions considered several static site generators and documentation frameworks (Docusaurus, VitePress, Astro, custom Vite+MDX+React). The focus quickly shifted to maximizing reusability, plug-and-play simplicity, and developer independence. The final solution emerged as a copy-in CLI tool that scaffolds a customizable Vite+MDX+React docs app into any project, allowing users to specify their docs directory and own the codebase.\n\n## 🌱 Project Genesis & Motivation\nThe motivation was to empower developers to easily enhance their documentation with custom styling and interactive code snippets, without being locked into a specific tool or package. The inspiration came from the desire for a solution that is as easy to adopt as running a single command, but leaves users in full control—similar to the approach used by shadcn/ui for React components. The core challenge was finding a solution that maintains the benefits of git-based version control while providing rich interactive features like live code execution, syntax highlighting, and media embedding. The goal was to create a system particularly suited for software development education where learners could both read about concepts and experiment with live code examples.\n\n## 🗂️ Project Overview\n- **Goal:** Provide a CLI tool that copies a ready-to-use Vite+MDX+React documentation app into any user’s project.\n- **Audience:** Developers who want interactive, styled docs with minimal setup and maximum flexibility.\n- **Key Features:**\n  - Plug-and-play CLI via Shell Script\n  - User-defined docs directory\n  - Full code ownership and customizability\n  - Interactive MDX/React snippets\n  - Minimal dependencies and clear structure\n  - Text-based foundation for git compatibility\n  - Human-readable source in any editor\n  - Enhanced rendering with rich styling and media embedding\n  - Live code execution (TypeScript/JavaScript)\n  - Cross-platform compatibility (browsers, IDEs, SSGs)\n  - Educational focus\n  - Framework flexibility (Vite, Astro, Docusaurus, Starlight)\n\n## 💡 Core Ideas & Features\n- **Copy-in CLI:** Scaffolds the docs app into any target directory, with prompts for docs location. This is not a global npm package, but a local tool or script that copies the template into the user's project, inspired by the shadcn/ui approach.\n- **Custom Vite+MDX+React Template:** Lightweight, flexible, and easy to maintain.\n- **Configurable Docs Directory:** User can specify any folder for their markdown/MDX files.\n- **No Lock-in:** Users can fully customize or extend the copied codebase.\n- **Clear Next Steps:** CLI prints instructions for install, dev, and build.\n- **Shell/Batch Script:** A bash or batch script will be provided to download and configure the template interactively.\n- **Text-Based Foundation:** Documents authored in Markdown/MDX format for git compatibility\n- **Human-Readable Source:** Plain text documents readable in any editor\n- **Enhanced Rendering:** Rich styling, syntax highlighting, and media embedding in specialized environments\n- **Live Code Execution:** TypeScript/JavaScript code snippets executable within documents\n- **Cross-Platform Compatibility:** Works in browsers, IDEs, and static site generators\n- **Educational Focus:** Designed specifically for software development learning\n- **Framework Flexibility:** Multiple implementation approaches (Vite, Astro, Docusaurus, Starlight)\n\n## 🏗️ Architecture & Structure\nThe system architecture consists of several layers:\n\n**Content Layer**:\n- Source documents in Markdown/MDX format\n- Code snippets embedded as executable blocks\n- Media references and metadata\n\n**Processing Layer**:\n- MDX parsing and compilation\n- Sandpack integration for code execution\n- Static site generation or runtime rendering\n\n**Presentation Layer**:\n- Responsive web interfaces\n- Interactive code editors\n- Syntax highlighting and theming\n\n**Framework Options**:\n- **Vite**: Lightweight development server with React and MDX support\n- **Astro**: Static site generation with component islands\n- **Docusaurus**: Documentation-focused framework with built-in features\n- **Starlight**: Astro-based documentation theme with enhanced features\n\n**Template App:**\n- `package.json`, `vite.config.ts`, `src/`, `public/`, `README.md`, example docs\n- Configurable docs directory (via config file or CLI prompt)\n**CLI Tool:**\n- Shell Script\n- Prompts for target and docs directory\n- Copies template, injects config, handles conflicts\n- Prints next steps\n\n**Example File Structure:**\n```\ntemplate/\n  package.json\n  vite.config.ts\n  src/\n  public/\n  README.md\n  docs/\ncli/\n  setup.sh\n  setup.bat\nREADME.md\n```\n\n## 🧩 Code Snippets & Examples\n\n**MDX Document Structure:**\n```mdx\nimport { Sandpack } from \"@codesandbox/sandpack-react\";\n\n# My Interactive Document\n\nHere's some content with executable code:\n\n\u003CSandpack template=\"react-ts\" files={{\n  \"/App.tsx\": `export default function App() { \n    return \u003Ch1>Hello Interactive Docs!\u003C/h1>; \n  }`\n}} />\n```\n\n**Vite Configuration Example:**\n```js\nimport { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\nimport mdx from '@mdx-js/rollup'\n\nexport default defineConfig({\n  plugins: [react(), mdx()]\n})\n```\n\n**Sandpack Integration Pattern:**\n```jsx\nimport { Sandpack } from \"@codesandbox/sandpack-react\";\n\nconst InteractiveExample = () => (\n  \u003CSandpack \n    template=\"vanilla-ts\"\n    files={{\n      \"/index.ts\": codeString,\n      \"/index.html\": htmlString\n    }}\n    options={{\n      showNavigator: true,\n      showTabs: true\n    }}\n  />\n);\n```\n\n**Shell Script Example (Bash):**\n```bash\n#!/bin/bash\necho \"Welcome to the Docs Setup!\"\nread -p \"Enter the target directory [docs-app]: \" TARGET_DIR\nTARGET_DIR=${TARGET_DIR:-docs-app}\nread -p \"Enter the docs source directory [docs]: \" DOCS_DIR\nDOCS_DIR=${DOCS_DIR:-docs}\n# Download and extract template, update config, etc.\ncurl -L https://github.com/your-org/your-repo/archive/refs/heads/main.tar.gz | tar xz\nmv your-repo-main/template \"$TARGET_DIR\"\n# Here you would update the config file to set docsDir to $DOCS_DIR\necho \"Setup complete! See $TARGET_DIR for your new docs app.\"\n```\n\n**Batch Script Example (Windows):**\n```bat\n@echo off\nset /p TARGET_DIR=Enter the target directory [docs-app]:\nif \"%TARGET_DIR%\"==\"\" set TARGET_DIR=docs-app\nset /p DOCS_DIR=Enter the docs source directory [docs]:\nif \"%DOCS_DIR%\"==\"\" set DOCS_DIR=docs\nREM Download and extract template (requires curl and tar or use PowerShell Expand-Archive)\ncurl -L https://github.com/your-org/your-repo/archive/refs/heads/main.zip -o template.zip\ntar -xf template.zip\nmove your-repo-main\\template %TARGET_DIR%\nREM Here you would update the config file to set docsDir to %DOCS_DIR%\necho Setup complete! See %TARGET_DIR% for your new docs app.\n```\n\n## ❌ Rejected Ideas & Alternatives\n- **Jupyter Notebooks**: Rejected for requiring a python environment\n- **Pure Markdown Extensions**: Insufficient for the level of interactivity required\n- **Custom IDE Extensions Only**: Too limited in scope and accessibility\n- **Gatsby**: Dismissed as \"not so relevant anymore\" and potentially outdated\n- **Next.js**: Considered overkill for the specific use case of documentation\n- **Docusaurus:** Too opinionated, inflexible directory structure.\n- **VitePress:** Vue-based, less flexible for React/MDX, directory config not first-class.\n- **Astro:** Flexible but overkill for this use case.\n- **Pure npm package:** Would require users to fork or rely on package updates, increasing maintenance burden.\n\n## 💬 Key Conversation Excerpts\n> \"I want to create interactive documents for software projects and software development education purposes.\"\n\n> \"The documents should be text-based, so they can be versioned by git. The documents should be human-readable in simple text editors.\"\n\n> \"TypeScript based code snippets should not only be visible as code, but also executed within the document itself.\"\n\n> \"I don't want to use Gatsby or Next.js. Gatsby is not so relevant anymore and Next.js seems overkill for this.\"\n\n> \"What about utilising a light Vite setup? Would that be possible? Besides that I have used Docusaurus in the past, but also Starlight (based on Astro.js) and Astro.js itself could be options, no?\"\n\n> \"I don't want to be reliable for updating and improving the package beyond my own needs. So maybe a similar distribution strategy as is used for shadcn components could be an option.\"\n\n> \"A custom Vite + MDX + React setup is the best fit for your copy-in CLI, especially with the requirement for arbitrary docs directory support.\"\n\n> \"The solution is plug-and-play, requires minimal setup, and gives users full ownership of the code.\"\n\n## 🏛️ Architecture & Structure (Summary)\n- **Template App:**\n  - `package.json`, `vite.config.ts`, `src/`, `public/`, `README.md`, example docs\n  - Configurable docs directory (via config file or CLI prompt)\n- **CLI Tool:**\n  - Shell Script\n  - Prompts for target and docs directory\n  - Copies template, injects config, handles conflicts\n  - Prints next steps\n\n## 📚 References & Inspirations\n- **MDX Documentation**: https://mdxjs.com/\n- **Sandpack by CodeSandbox**: https://sandpack.codesandbox.io/\n- **Vite**: https://vitejs.dev/\n- **Astro**: https://astro.build/\n- **Docusaurus**: https://docusaurus.io/\n- **Starlight**: https://starlight.astro.build/\n- **Phaser.js**: https://phaser.io/ (used as example domain)\n- **shadcn/ui**: https://ui.shadcn.com/\n\n## ❓ Open Questions & Next Steps\n1. **Performance Comparison**: Which framework provides the best performance for large documents with multiple interactive code blocks?\n2. **Maintenance Overhead**: How do the different solutions compare in terms of long-term maintenance and updates?\n3. **Deployment Flexibility**: Which solution offers the most deployment options (static hosting, CDN, etc.)?\n4. **Extension Ecosystem**: How extensible is each solution for adding custom interactive components?\n5. **Learning Curve**: What is the developer experience for content creators using each solution?\n6. Should the CLI or script support updating an existing docs app?\n7. What optional features (search, theming) should be offered?\n8. How to best document advanced customization for users?\n9. Should the shell and batch script approaches be officially supported alongside the Node.js CLI?\n10. How to best support Windows users (batch, PowerShell, or WSL)?\n11. What is the best way to communicate security and trust for remote shell scripts?\n\n**Immediate Next Steps:**\n1. Implement POCs for all four solutions (Vite, Astro, Docusaurus, Starlight)\n2. Use the Amelcraft game document as a common test case\n3. Evaluate each solution against the defined criteria\n4. Create a comparative analysis document\n5. Select the optimal solution based on performance, usability, and maintainability\n\n**POC Implementation Directory**: `./pocs/` contains detailed instructions for implementing each proof-of-concept with the same source material to enable direct comparison.","../../ideas/interactive-docs/README.md","496228502481a664",{"html":90,"metadata":91},"\u003Ch1 id=\"-interactive-documentation-system--enhanced-copy-in-cli-solution\">📝 Interactive Documentation System &#x26; Enhanced Copy-in CLI Solution\u003C/h1>\n\u003Cp>\u003Cstrong>Continued as \u003Ca href=\"https://github.com/fea-lib/mdxpress\">mdxpress\u003C/a>\u003C/strong>\u003C/p>\n\u003Ch2 id=\"-project-evolution\">🔄 Project Evolution\u003C/h2>\n\u003Cp>The project began with a clear vision for interactive documentation that would serve software projects and educational purposes. The initial inquiry focused on finding solutions that could balance text-based version control with enhanced interactive features. Early discussions considered several static site generators and documentation frameworks (Docusaurus, VitePress, Astro, custom Vite+MDX+React). The focus quickly shifted to maximizing reusability, plug-and-play simplicity, and developer independence. The final solution emerged as a copy-in CLI tool that scaffolds a customizable Vite+MDX+React docs app into any project, allowing users to specify their docs directory and own the codebase.\u003C/p>\n\u003Ch2 id=\"-project-genesis--motivation\">🌱 Project Genesis &#x26; Motivation\u003C/h2>\n\u003Cp>The motivation was to empower developers to easily enhance their documentation with custom styling and interactive code snippets, without being locked into a specific tool or package. The inspiration came from the desire for a solution that is as easy to adopt as running a single command, but leaves users in full control—similar to the approach used by shadcn/ui for React components. The core challenge was finding a solution that maintains the benefits of git-based version control while providing rich interactive features like live code execution, syntax highlighting, and media embedding. The goal was to create a system particularly suited for software development education where learners could both read about concepts and experiment with live code examples.\u003C/p>\n\u003Ch2 id=\"️-project-overview\">🗂️ Project Overview\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Cstrong>Goal:\u003C/strong> Provide a CLI tool that copies a ready-to-use Vite+MDX+React documentation app into any user’s project.\u003C/li>\n\u003Cli>\u003Cstrong>Audience:\u003C/strong> Developers who want interactive, styled docs with minimal setup and maximum flexibility.\u003C/li>\n\u003Cli>\u003Cstrong>Key Features:\u003C/strong>\n\u003Cul>\n\u003Cli>Plug-and-play CLI via Shell Script\u003C/li>\n\u003Cli>User-defined docs directory\u003C/li>\n\u003Cli>Full code ownership and customizability\u003C/li>\n\u003Cli>Interactive MDX/React snippets\u003C/li>\n\u003Cli>Minimal dependencies and clear structure\u003C/li>\n\u003Cli>Text-based foundation for git compatibility\u003C/li>\n\u003Cli>Human-readable source in any editor\u003C/li>\n\u003Cli>Enhanced rendering with rich styling and media embedding\u003C/li>\n\u003Cli>Live code execution (TypeScript/JavaScript)\u003C/li>\n\u003Cli>Cross-platform compatibility (browsers, IDEs, SSGs)\u003C/li>\n\u003Cli>Educational focus\u003C/li>\n\u003Cli>Framework flexibility (Vite, Astro, Docusaurus, Starlight)\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"-core-ideas--features\">💡 Core Ideas &#x26; Features\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Cstrong>Copy-in CLI:\u003C/strong> Scaffolds the docs app into any target directory, with prompts for docs location. This is not a global npm package, but a local tool or script that copies the template into the user’s project, inspired by the shadcn/ui approach.\u003C/li>\n\u003Cli>\u003Cstrong>Custom Vite+MDX+React Template:\u003C/strong> Lightweight, flexible, and easy to maintain.\u003C/li>\n\u003Cli>\u003Cstrong>Configurable Docs Directory:\u003C/strong> User can specify any folder for their markdown/MDX files.\u003C/li>\n\u003Cli>\u003Cstrong>No Lock-in:\u003C/strong> Users can fully customize or extend the copied codebase.\u003C/li>\n\u003Cli>\u003Cstrong>Clear Next Steps:\u003C/strong> CLI prints instructions for install, dev, and build.\u003C/li>\n\u003Cli>\u003Cstrong>Shell/Batch Script:\u003C/strong> A bash or batch script will be provided to download and configure the template interactively.\u003C/li>\n\u003Cli>\u003Cstrong>Text-Based Foundation:\u003C/strong> Documents authored in Markdown/MDX format for git compatibility\u003C/li>\n\u003Cli>\u003Cstrong>Human-Readable Source:\u003C/strong> Plain text documents readable in any editor\u003C/li>\n\u003Cli>\u003Cstrong>Enhanced Rendering:\u003C/strong> Rich styling, syntax highlighting, and media embedding in specialized environments\u003C/li>\n\u003Cli>\u003Cstrong>Live Code Execution:\u003C/strong> TypeScript/JavaScript code snippets executable within documents\u003C/li>\n\u003Cli>\u003Cstrong>Cross-Platform Compatibility:\u003C/strong> Works in browsers, IDEs, and static site generators\u003C/li>\n\u003Cli>\u003Cstrong>Educational Focus:\u003C/strong> Designed specifically for software development learning\u003C/li>\n\u003Cli>\u003Cstrong>Framework Flexibility:\u003C/strong> Multiple implementation approaches (Vite, Astro, Docusaurus, Starlight)\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"️-architecture--structure\">🏗️ Architecture &#x26; Structure\u003C/h2>\n\u003Cp>The system architecture consists of several layers:\u003C/p>\n\u003Cp>\u003Cstrong>Content Layer\u003C/strong>:\u003C/p>\n\u003Cul>\n\u003Cli>Source documents in Markdown/MDX format\u003C/li>\n\u003Cli>Code snippets embedded as executable blocks\u003C/li>\n\u003Cli>Media references and metadata\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cstrong>Processing Layer\u003C/strong>:\u003C/p>\n\u003Cul>\n\u003Cli>MDX parsing and compilation\u003C/li>\n\u003Cli>Sandpack integration for code execution\u003C/li>\n\u003Cli>Static site generation or runtime rendering\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cstrong>Presentation Layer\u003C/strong>:\u003C/p>\n\u003Cul>\n\u003Cli>Responsive web interfaces\u003C/li>\n\u003Cli>Interactive code editors\u003C/li>\n\u003Cli>Syntax highlighting and theming\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cstrong>Framework Options\u003C/strong>:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Vite\u003C/strong>: Lightweight development server with React and MDX support\u003C/li>\n\u003Cli>\u003Cstrong>Astro\u003C/strong>: Static site generation with component islands\u003C/li>\n\u003Cli>\u003Cstrong>Docusaurus\u003C/strong>: Documentation-focused framework with built-in features\u003C/li>\n\u003Cli>\u003Cstrong>Starlight\u003C/strong>: Astro-based documentation theme with enhanced features\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cstrong>Template App:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode>package.json\u003C/code>, \u003Ccode>vite.config.ts\u003C/code>, \u003Ccode>src/\u003C/code>, \u003Ccode>public/\u003C/code>, \u003Ccode>README.md\u003C/code>, example docs\u003C/li>\n\u003Cli>Configurable docs directory (via config file or CLI prompt)\n\u003Cstrong>CLI Tool:\u003C/strong>\u003C/li>\n\u003Cli>Shell Script\u003C/li>\n\u003Cli>Prompts for target and docs directory\u003C/li>\n\u003Cli>Copies template, injects config, handles conflicts\u003C/li>\n\u003Cli>Prints next steps\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cstrong>Example File Structure:\u003C/strong>\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>template/\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  package.json\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  vite.config.ts\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  src/\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  public/\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  README.md\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  docs/\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>cli/\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  setup.sh\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  setup.bat\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>README.md\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"-code-snippets--examples\">🧩 Code Snippets &#x26; Examples\u003C/h2>\n\u003Cp>\u003Cstrong>MDX Document Structure:\u003C/strong>\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"mdx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">import { Sandpack } from \"\u003C/span>\u003Cspan style=\"color:#9ECBFF\">@\u003C/span>\u003Cspan style=\"color:#DBEDFF;text-decoration:underline\">codesandbox/sandpack-react\u003C/span>\u003Cspan style=\"color:#E1E4E8\">\";\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF;font-weight:bold\"># My Interactive Document\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">Here's some content with executable code:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;Sandpack template=\"react-ts\" files={{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  \"/App.tsx\": `export default function App() { \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    return &#x3C;h1>Hello Interactive Docs!&#x3C;/h1>; \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }`\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}} />\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Cstrong>Vite Configuration Example:\u003C/strong>\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { defineConfig } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'vite'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> react \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> '@vitejs/plugin-react'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> mdx \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> '@mdx-js/rollup'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> default\u003C/span>\u003Cspan style=\"color:#B392F0\"> defineConfig\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  plugins: [\u003C/span>\u003Cspan style=\"color:#B392F0\">react\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(), \u003C/span>\u003Cspan style=\"color:#B392F0\">mdx\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">})\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Cstrong>Sandpack Integration Pattern:\u003C/strong>\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"jsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { Sandpack } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"@codesandbox/sandpack-react\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#B392F0\"> InteractiveExample\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> () \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  &#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">Sandpack\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    template\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"vanilla-ts\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    files\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">      \"/index.ts\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: codeString,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">      \"/index.html\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: htmlString\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    options\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      showNavigator: \u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      showTabs: \u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Cstrong>Shell Script Example (Bash):\u003C/strong>\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">#!/bin/bash\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Welcome to the Docs Setup!\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">read\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -p\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Enter the target directory [docs-app]: \"\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> TARGET_DIR\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">TARGET_DIR\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">${TARGET_DIR\u003C/span>\u003Cspan style=\"color:#F97583\">:-\u003C/span>\u003Cspan style=\"color:#E1E4E8\">docs-app}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">read\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -p\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Enter the docs source directory [docs]: \"\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> DOCS_DIR\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">DOCS_DIR\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">${DOCS_DIR\u003C/span>\u003Cspan style=\"color:#F97583\">:-\u003C/span>\u003Cspan style=\"color:#E1E4E8\">docs}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Download and extract template, update config, etc.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">curl\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -L\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> https://github.com/your-org/your-repo/archive/refs/heads/main.tar.gz\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#B392F0\"> tar\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> xz\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">mv\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> your-repo-main/template\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">$TARGET_DIR\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Here you would update the config file to set docsDir to $DOCS_DIR\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Setup complete! See \u003C/span>\u003Cspan style=\"color:#E1E4E8\">$TARGET_DIR\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> for your new docs app.\"\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Cstrong>Batch Script Example (Windows):\u003C/strong>\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bat\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">@echo\u003C/span>\u003Cspan style=\"color:#F97583\"> off\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">set\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> /p TARGET_DIR\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">Enter the target directory [docs-app]:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">if\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">%TARGET_DIR%\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#F97583\">==\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\"\u003C/span>\u003Cspan style=\"color:#F97583\"> set\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> TARGET_DIR\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">docs-app\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">set\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> /p DOCS_DIR\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">Enter the docs source directory [docs]:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">if\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">%DOCS_DIR%\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#F97583\">==\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\"\u003C/span>\u003Cspan style=\"color:#F97583\"> set\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> DOCS_DIR\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">docs\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">REM\u003C/span>\u003Cspan style=\"color:#6A737D\"> Download and extract template (requires curl and tar or use PowerShell Expand-Archive)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">curl -L https://github.com/your-org/your-repo/archive/refs/heads/main.zip -o template.zip\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">tar -xf template.zip\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">move\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> your-repo-main\\template %TARGET_DIR%\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">REM\u003C/span>\u003Cspan style=\"color:#6A737D\"> Here you would update the config file to set docsDir to %DOCS_DIR%\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">echo\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Setup complete! See %TARGET_DIR% for your new docs app.\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"-rejected-ideas--alternatives\">❌ Rejected Ideas &#x26; Alternatives\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Cstrong>Jupyter Notebooks\u003C/strong>: Rejected for requiring a python environment\u003C/li>\n\u003Cli>\u003Cstrong>Pure Markdown Extensions\u003C/strong>: Insufficient for the level of interactivity required\u003C/li>\n\u003Cli>\u003Cstrong>Custom IDE Extensions Only\u003C/strong>: Too limited in scope and accessibility\u003C/li>\n\u003Cli>\u003Cstrong>Gatsby\u003C/strong>: Dismissed as “not so relevant anymore” and potentially outdated\u003C/li>\n\u003Cli>\u003Cstrong>Next.js\u003C/strong>: Considered overkill for the specific use case of documentation\u003C/li>\n\u003Cli>\u003Cstrong>Docusaurus:\u003C/strong> Too opinionated, inflexible directory structure.\u003C/li>\n\u003Cli>\u003Cstrong>VitePress:\u003C/strong> Vue-based, less flexible for React/MDX, directory config not first-class.\u003C/li>\n\u003Cli>\u003Cstrong>Astro:\u003C/strong> Flexible but overkill for this use case.\u003C/li>\n\u003Cli>\u003Cstrong>Pure npm package:\u003C/strong> Would require users to fork or rely on package updates, increasing maintenance burden.\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"-key-conversation-excerpts\">💬 Key Conversation Excerpts\u003C/h2>\n\u003Cblockquote>\n\u003Cp>“I want to create interactive documents for software projects and software development education purposes.”\u003C/p>\n\u003C/blockquote>\n\u003Cblockquote>\n\u003Cp>“The documents should be text-based, so they can be versioned by git. The documents should be human-readable in simple text editors.”\u003C/p>\n\u003C/blockquote>\n\u003Cblockquote>\n\u003Cp>“TypeScript based code snippets should not only be visible as code, but also executed within the document itself.”\u003C/p>\n\u003C/blockquote>\n\u003Cblockquote>\n\u003Cp>“I don’t want to use Gatsby or Next.js. Gatsby is not so relevant anymore and Next.js seems overkill for this.”\u003C/p>\n\u003C/blockquote>\n\u003Cblockquote>\n\u003Cp>“What about utilising a light Vite setup? Would that be possible? Besides that I have used Docusaurus in the past, but also Starlight (based on Astro.js) and Astro.js itself could be options, no?”\u003C/p>\n\u003C/blockquote>\n\u003Cblockquote>\n\u003Cp>“I don’t want to be reliable for updating and improving the package beyond my own needs. So maybe a similar distribution strategy as is used for shadcn components could be an option.”\u003C/p>\n\u003C/blockquote>\n\u003Cblockquote>\n\u003Cp>“A custom Vite + MDX + React setup is the best fit for your copy-in CLI, especially with the requirement for arbitrary docs directory support.”\u003C/p>\n\u003C/blockquote>\n\u003Cblockquote>\n\u003Cp>“The solution is plug-and-play, requires minimal setup, and gives users full ownership of the code.”\u003C/p>\n\u003C/blockquote>\n\u003Ch2 id=\"️-architecture--structure-summary\">🏛️ Architecture &#x26; Structure (Summary)\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Cstrong>Template App:\u003C/strong>\n\u003Cul>\n\u003Cli>\u003Ccode>package.json\u003C/code>, \u003Ccode>vite.config.ts\u003C/code>, \u003Ccode>src/\u003C/code>, \u003Ccode>public/\u003C/code>, \u003Ccode>README.md\u003C/code>, example docs\u003C/li>\n\u003Cli>Configurable docs directory (via config file or CLI prompt)\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Cstrong>CLI Tool:\u003C/strong>\n\u003Cul>\n\u003Cli>Shell Script\u003C/li>\n\u003Cli>Prompts for target and docs directory\u003C/li>\n\u003Cli>Copies template, injects config, handles conflicts\u003C/li>\n\u003Cli>Prints next steps\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"-references--inspirations\">📚 References &#x26; Inspirations\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Cstrong>MDX Documentation\u003C/strong>: \u003Ca href=\"https://mdxjs.com/\">https://mdxjs.com/\u003C/a>\u003C/li>\n\u003Cli>\u003Cstrong>Sandpack by CodeSandbox\u003C/strong>: \u003Ca href=\"https://sandpack.codesandbox.io/\">https://sandpack.codesandbox.io/\u003C/a>\u003C/li>\n\u003Cli>\u003Cstrong>Vite\u003C/strong>: \u003Ca href=\"https://vitejs.dev/\">https://vitejs.dev/\u003C/a>\u003C/li>\n\u003Cli>\u003Cstrong>Astro\u003C/strong>: \u003Ca href=\"https://astro.build/\">https://astro.build/\u003C/a>\u003C/li>\n\u003Cli>\u003Cstrong>Docusaurus\u003C/strong>: \u003Ca href=\"https://docusaurus.io/\">https://docusaurus.io/\u003C/a>\u003C/li>\n\u003Cli>\u003Cstrong>Starlight\u003C/strong>: \u003Ca href=\"https://starlight.astro.build/\">https://starlight.astro.build/\u003C/a>\u003C/li>\n\u003Cli>\u003Cstrong>Phaser.js\u003C/strong>: \u003Ca href=\"https://phaser.io/\">https://phaser.io/\u003C/a> (used as example domain)\u003C/li>\n\u003Cli>\u003Cstrong>shadcn/ui\u003C/strong>: \u003Ca href=\"https://ui.shadcn.com/\">https://ui.shadcn.com/\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"-open-questions--next-steps\">❓ Open Questions &#x26; Next Steps\u003C/h2>\n\u003Col>\n\u003Cli>\u003Cstrong>Performance Comparison\u003C/strong>: Which framework provides the best performance for large documents with multiple interactive code blocks?\u003C/li>\n\u003Cli>\u003Cstrong>Maintenance Overhead\u003C/strong>: How do the different solutions compare in terms of long-term maintenance and updates?\u003C/li>\n\u003Cli>\u003Cstrong>Deployment Flexibility\u003C/strong>: Which solution offers the most deployment options (static hosting, CDN, etc.)?\u003C/li>\n\u003Cli>\u003Cstrong>Extension Ecosystem\u003C/strong>: How extensible is each solution for adding custom interactive components?\u003C/li>\n\u003Cli>\u003Cstrong>Learning Curve\u003C/strong>: What is the developer experience for content creators using each solution?\u003C/li>\n\u003Cli>Should the CLI or script support updating an existing docs app?\u003C/li>\n\u003Cli>What optional features (search, theming) should be offered?\u003C/li>\n\u003Cli>How to best document advanced customization for users?\u003C/li>\n\u003Cli>Should the shell and batch script approaches be officially supported alongside the Node.js CLI?\u003C/li>\n\u003Cli>How to best support Windows users (batch, PowerShell, or WSL)?\u003C/li>\n\u003Cli>What is the best way to communicate security and trust for remote shell scripts?\u003C/li>\n\u003C/ol>\n\u003Cp>\u003Cstrong>Immediate Next Steps:\u003C/strong>\u003C/p>\n\u003Col>\n\u003Cli>Implement POCs for all four solutions (Vite, Astro, Docusaurus, Starlight)\u003C/li>\n\u003Cli>Use the Amelcraft game document as a common test case\u003C/li>\n\u003Cli>Evaluate each solution against the defined criteria\u003C/li>\n\u003Cli>Create a comparative analysis document\u003C/li>\n\u003Cli>Select the optimal solution based on performance, usability, and maintainability\u003C/li>\n\u003C/ol>\n\u003Cp>\u003Cstrong>POC Implementation Directory\u003C/strong>: \u003Ccode>./pocs/\u003C/code> contains detailed instructions for implementing each proof-of-concept with the same source material to enable direct comparison.\u003C/p>",{"headings":92,"localImagePaths":115,"remoteImagePaths":116,"frontmatter":117,"imagePaths":118},[93,96,99,101,104,105,106,108,109,110,113,114],{"depth":29,"slug":94,"text":95},"-interactive-documentation-system--enhanced-copy-in-cli-solution","📝 Interactive Documentation System & Enhanced Copy-in CLI Solution",{"depth":33,"slug":97,"text":98},"-project-evolution","🔄 Project Evolution",{"depth":33,"slug":41,"text":100},"🌱 Project Genesis & Motivation",{"depth":33,"slug":102,"text":103},"️-project-overview","🗂️ Project Overview",{"depth":33,"slug":47,"text":48},{"depth":33,"slug":59,"text":60},{"depth":33,"slug":65,"text":107},"🧩 Code Snippets & Examples",{"depth":33,"slug":53,"text":54},{"depth":33,"slug":56,"text":57},{"depth":33,"slug":111,"text":112},"️-architecture--structure-summary","🏛️ Architecture & Structure (Summary)",{"depth":33,"slug":74,"text":75},{"depth":33,"slug":77,"text":78},[],[],{},[]]